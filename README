% GIT-HEADS(1) GIT-HEADS(1)
% Sebastian Schwarz <seschwar@googlemail.com>

# NAME

git-heads -- show branches without any child commits with `git-log`(1)

# SYNOPSIS

`git-heads` [`--all` | `--local` | `--remote`] [`--branches`] [(`--contains` | `--merged` | `--no-merged`) [*commit*]] [*git-log-option*]...

`git-heads` [`--all` | `--local` | `--remote`] [`--heads`] [*git-log-option*]...

# DESCRIPTION

Inspired by Mercurial's `heads` command this Git command's purpose is to display information about so-called "heads".
Heads are commits which have no child commits.
This also means that they are branches that have not been merged with any other branch.
Do not confuse this definition of a head with Git's `HEAD` ref which points to the lastly checked out commit.
Furthermore you also must not confuse it with `$GIT_DIR/refs/heads`, the directory where the references to your local branches are stored.

`git-heads`' functionality is similar to the follow programs:

    hg heads
    git branch ... | xargs -n1 git log ...
    git wtf

It uses `git-log`(1) to display the commit information.

# OPTIONS

-a, \--all
:   Show both local and remote branches which have no child commits.

-b, \--branch, \--branches
:   Show branches regardless whether they have child commits or not.
    Similar to `git-branch`(1).

\--contains [*commit*], \--merged [*commit*], \--no-merged [*commit*]
:   Passed to `git-branch`(1).
    Implies `--branches`.

\--head, \--heads
:   Show only the tips of the branches without any children.
    This is the default behavior.

-l, \--local
:   Show only local branches.
    This is the default behavior.

-r, \--remote
:   Show only remote branches.

*git-log-option*
:   These options are passed to `git-log`(1) which is used to display the matching branches.

# EXAMPLES

Show the last five commits for every remote branch which has been merged with the current branch:

    git heads --remote --branches --merged --format=oneline -n 5

Show the last three commits on every head in a graph:

    git heads --all --graph -n 3

# SEE ALSO

`git`(1), `git-branch`(1), `git-log`(1), `git wtf -h`, `hg heads --help`.

Homepage: <http://github.com/seschwar/git-heads/>

